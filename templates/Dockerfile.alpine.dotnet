ARG buildimage
ARG runtimeimage

## ============================= 
# use the sdk to build/test, but later we'll use runtime for published image
FROM ${buildimage} AS build
ARG buildconfiguration
ARG nugetfeed
ARG branch
ARG branchTag
ARG commit
ARG commitdate
ARG version
ARG imageversion
ARG sonarscannerversion
ARG sonarhost
ARG sonartoken
ARG sonarkey
ARG projectname
ARG analysisArgs
ARG organization
ARG publishableProject
ARG service_name

# show dotnet version for debugging
RUN dotnet --info

# copy 
COPY src/ /app/src/

# update build.json
RUN jq -n --arg version "$version" --arg timestamp $(date +"%Y-%m-%dT%H:%M:%S%:z") --arg tag "$imageversion" --arg suffix "$branchTag" '{"build":{"version":$version,"timestamp":$timestamp,"tag":$tag,"suffix":$suffix }}' > /app/src/${publishableProject}/build.json
RUN cat /app/src/${publishableProject}/build.json

# build, run tests and lint analysis
WORKDIR /app/src
RUN dotnet restore --source ${nugetfeed}

RUN export SONAR_SCANNER_OPTS="-Xmx4096m" && \
    echo "analysisArgs=$analysisArgs" && \
    dotnet sonarscanner begin \
    /k:"$(echo $sonarkey | tr '[:upper:]' '[:lower:]')" \
    /o:"$organization" \
    /d:sonar.host.url="$sonarhost" \
    /d:sonar.login="$sonartoken" \
    /v:"$imageversion" \
    /d:sonar.cs.opencover.reportsPaths="**/*.opencover.xml" \
    /d:sonar.coverage.exclusions="**/*Test*.cs,**/Migrations/*" \
    /d:sonar.exclusions="**/*Test*.cs,**/Migrations/*,**/*Api.xml" \
    $analysisArgs && \
    dotnet build --no-restore && \
    dotnet test --no-build --no-restore /p:Exclude="[xunit*]*" /p:ParallelizeTestCollections=false --collect:"XPlat Code Coverage" --settings coverlet.runsettings.xml && \
	#--logger:"teamcity;verbosity=normal" && \
    dotnet sonarscanner end /d:sonar.login="$sonartoken"
    
# publish artifacts for runtime image    
RUN dotnet publish ./${publishableProject} -p:Version=$version -o out -r linux-musl-x64

## ============================= 
## Build the runtime environment
FROM $runtimeimage AS runtime
ARG projectname
ARG publishableProject
ARG service_executable
ARG service_name
ARG timezone

ENV configpath /app/appsettings.json
ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
ENV ASPNETCORE_URLS=http://+:5000
ENV ASPNETCORE_ENVIRONMENT=Deployment
ENV SERVICE_NAME=$service_name
ENV SERVICE_EXECUTABLE=$service_executable
ENV TZ=$timezone
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# copy init.sh from deploy to image, if it exists (thus wildcards)
COPY ./deploy/*.sh /app/
RUN chmod a+x /app/*.sh

COPY ./src/sql /sql/src/sql
COPY ./update-database.ps1 /sql
COPY ./repository.psm1 /sql
COPY ./repository.json /sql
RUN chmod -R a+rw /sql

WORKDIR /app
COPY --from=build /app/src/out ./
COPY --from=build /app/src/"$publishableProject"/build.json ./
RUN chown appuser:appuser appsettings.json

USER appuser
EXPOSE 5000/tcp
CMD ["/startup.sh"]
